// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleName {
    SUPER_ADMIN
    ADMIN
    SELLER
    CUSTOMER
}

enum OrderStatus {
    PENDING      // Order placed, payment not yet confirmed or initiated
    PROCESSING   // Payment confirmed, order is being prepared
    SHIPPED
    DELIVERED
    CANCELLED    // Order cancelled (by user or admin)
    FAILED       // Payment failed or order could not be processed
}

// Added Payment Status Enum
enum PaymentStatus {
    PENDING     // Payment initiated but not completed/confirmed
    SUCCEEDED   // Payment successful
    FAILED      // Payment failed
}

model User {
    id            String     @id @unique // Firebase UID
    email         String?    @unique
    name          String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    roles         UserRole[]
    cart          Cart?       // Add relation to Cart
    orders        Order[]
    addresses     Address[]   // Add relation to Address
    createdProducts Product[]  @relation("CreatedBy") // Products created by seller/admin
}

model Role {
    id        Int        @id @default(autoincrement())
    name      RoleName   @unique
    users     UserRole[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model UserRole {
    userId    String
    roleId    Int
    assignedAt DateTime @default(now())
    assignedBy String? // Optional: Track who assigned the role (User ID)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
}

model Cart {
      id        String   @id @default(cuid())
      userId    String   @unique // Foreign key to User
      user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
      items     CartItem[] // Relation to CartItem
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
}

model CartItem {
      id        Int      @id @default(autoincrement())
      cartId    String   // Foreign key to Cart
      cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
      productId Int      // Foreign key to Product
      product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
      quantity  Int
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt

      @@unique([cartId, productId]) // Ensures a product appears only once per cart
}

model Product {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    price       Float       // Consider using Decimal for financial values
    imageUrl    String?
    stock       Int         @default(0)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    createdById String // Link to the user who created it (Seller/Admin)
    createdBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
    orderItems  OrderItem[]
    cartItems   CartItem[]  // Add relation to CartItem

    @@index([name])
    @@index([createdById])
}

model Order {
    id              Int           @id @default(autoincrement())
    userId          String
    user            User          @relation(fields: [userId], references: [id])
    totalAmount     Float         // Consider using Decimal
    status          OrderStatus   @default(PENDING)
    paymentStatus   PaymentStatus @default(PENDING) // Added payment status
    paymentIntentId String?       @unique // Added for payment provider link
    shippingAddressId Int?          // Link to Address model
    billingAddressId  Int?          // Link to Address model
    shippingAddress Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id]) // Added shipping address relation
    billingAddress  Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id]) // Added billing address relation
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    orderItems      OrderItem[]

    @@index([userId])
    @@index([paymentIntentId])
}

model OrderItem {
    id             Int      @id @default(autoincrement())
    orderId        Int
    order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId      Int
    product        Product  @relation(fields: [productId], references: [id])
    quantity       Int
    priceAtPurchase Float    // Renamed from 'price' for clarity, consider Decimal
    createdAt      DateTime @default(now())

    @@index([orderId])
    @@index([productId])
}

// New Address Model
model Address {
    id           Int      @id @default(autoincrement())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    street       String
    city         String
    state        String?
    zipCode      String
    country      String
    isDefault    Boolean  @default(false) // Optional: Mark one address as default
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    shippingOrders Order[]  @relation("ShippingAddress") // Orders using this as shipping address
    billingOrders  Order[]  @relation("BillingAddress")  // Orders using this as billing address


    @@index([userId])
}
