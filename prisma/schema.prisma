// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleName {
    SUPER_ADMIN
    ADMIN
    SELLER
    CUSTOMER
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

model User {
    id            String     @id @unique // Firebase UID
    email         String?    @unique
    name          String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    roles         UserRole[]
    orders        Order[]
    createdProducts Product[]  @relation("CreatedBy") // Products created by seller/admin
}

model Role {
    id        Int        @id @default(autoincrement())
    name      RoleName   @unique
    users     UserRole[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model UserRole {
    userId    String
    roleId    Int
    assignedAt DateTime @default(now())
    assignedBy String? // Optional: Track who assigned the role (User ID)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
}

model Product {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    price       Float
    imageUrl    String?
    stock       Int         @default(0)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    createdById String // Link to the user who created it (Seller/Admin)
    createdBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
    orderItems  OrderItem[]

    @@index([name])
    @@index([createdById])
}

model Order {
    id          Int         @id @default(autoincrement())
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    totalAmount Float
    status      OrderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    orderItems  OrderItem[]

    @@index([userId])
}

model OrderItem {
    id        Int      @id @default(autoincrement())
    orderId   Int
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId Int
    product   Product  @relation(fields: [productId], references: [id])
    quantity  Int
    price     Float // Price at the time of order
    createdAt DateTime @default(now())

    @@index([orderId])
    @@index([productId])
}
